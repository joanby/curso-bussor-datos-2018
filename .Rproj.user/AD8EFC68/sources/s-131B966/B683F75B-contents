---
title: "07-trees"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# Árboles y bosques aleatorios

```{r}
library(rpart)
library(rpart.plot)
library(caret)

bank <- read.csv("../data/tema3/banknote-authentication.csv")

set.seed(2018)
idx <- createDataPartition(bank$class, p = 0.7, list=F)
tree <- rpart(class ~ ., data = bank[idx, ], method = "class",
              control = rpart.control(minsplit = 20, cp = 0.01))

tree

prp(tree, type = 2, extra = 104, nn = TRUE, fallen.leaves = TRUE,
    faclen=4, varlen = 8, shadow.col = "gray")


tree$cptable

tree.pruned <- prune(tree, tree$cptable[4, "CP"])

prp(tree.pruned, type = 2, extra = 104, nn = TRUE, fallen.leaves = TRUE,
    faclen=4, varlen = 8, shadow.col = "gray")
```

## Validación

```{r}
pred <- predict(tree.pruned, bank[-idx, ], type = "class")

tt <- table(bank[-idx,]$class, pred, dnn= c("Real", "Predicción"))

tt 

prop.table(tt)
```



## Curva ROC
```{r}
pred <- predict(tree.pruned, bank[-idx, ], type = "prob")

pred

pr <- prediction(pred[,2], bank[-idx, ]$class)

perf <- performance(pr, "tpr", "fpr")

plot(perf)
```


# Bosques aleatorios (Random Forest)
```{r}
library(randomForest)
bank$class <- factor(bank$class)

forest <- randomForest(x = bank[idx, 1:4],
                       y = bank[idx, ]$class,
                       ntree = 10, 
                       keep.forest = TRUE)

forest


```


## Validación
```{r}
pred <- predict(forest, bank[-idx, ], type = "class")
table(bank[-idx,]$class, pred, dnn = c("Real", "Pred"))
```

## ROC
```{r}
pred <- predict(forest, bank[-idx, ], type = "prob")

pred

prediction <- prediction(pred[,2], bank[-idx,]$class)

perf <- performance(prediction, "tpr", "fpr")

plot(perf)
```

