---
title: "09-knn"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# K Nearest Neighbors

```{r}
library(caret)
library(class)

vac <- read.csv("../data/tema3/vacation-trip-classification.csv")

```

## Escalado o normalización
```{r}
vac$Income.Z = scale(vac$Income)
vac$Family_size.Z = scale(vac$Family_size)
```


## Partición

```{r}
set.seed(2018)
idx <- createDataPartition(vac$Result, p = 0.5, list = FALSE)
train <- vac[idx,]# crear el modelo
temp <- vac[-idx,]# memoria tempral
idx2 <- createDataPartition(temp$Result, p= 0.5, list = FALSE)
val <- temp[idx2,]# conjunto de validación
test <- temp[-idx2,]#conjunto de testing
```

## KNN
```{r}
for(k in 1:8){
  pred1 <- knn(train[,4:5], val[,4:5], train$Result, k = k)
  tt<-table(val$Result, pred1, dnn = c("Actual", "Predicción"))
  cat(paste("Matriz de confusión para k = ", k, "\n"))
  cat("=============================================\n")
  print(tt)
  cat("=============================================\n\n\n")
}
```

## CV

```{r}
set.seed(2018)
trControl <- trainControl(method = "repeatedcv", number = 10, repeats = 3)

knn <- train(Result~Family_size + Income, data = train, method = "knn",
             trControl = trControl, preProcess = c("center", "scale"),
             tuneLength = 10)
knn
```

```{r}
 pred1 <- knn(train[,4:5], val[,4:5], train$Result, k = 17)
tt<-table(val$Result, pred1, dnn = c("Actual", "Predicción"))
tt
```

