heelp(read.csv)
help(read.csv)
NA
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("../data/tema1/auto-mpg.csv", header = TRUE, sep = ",")
View(data)
install.packages("XML")
url <- "../data/tema1/cd_catalog.xml"
xmlDoc <- xmlParse(url)
library(XML)
xmlDoc <- xmlParse(url)
rootNode <- xmlRoot(xmlDoc)
rootNode
data <- xmlSApply(rootNode, function(x) xmlSApply(x, xmlValue))
View(data)
df <- data.frame(t(data), row.names = NULL)
View(df)
url <- "../data/tema1/WorldPopulation-wiki.htm"
tables <- readHTMLTable(url)
View(tables)
world.most.populous <- tables[[6]]
View(world.most.populous)
readHTMLTable(url, which = 6)
??XML
??readHTMLTable
install.packages("kable")
install.packages("xtable")
install.packages("jsonlite")
knitr::opts_chunk$set(echo = TRUE)
library(xtable)
library(jsonlite)
data <- fromJSON("../data/tema1/students.json")
View(data)
data <- fromJSON("../data/tema1/students.json")
View(data)
data <- read.fwf("../data/tema1/student-fwf.txt",
widths = c(4,15,20,15,4),
col.names = c("ID", "Name", "Email", "Department", "Year"))
View(data)
data$Name
data$Email
View(data)
saveRDS(data, file = "../data/tema1/data_2018_09_25.rds")
View(data)
data.from.my.friend <- readRDS("../data/tema1/data_2018_09_25.rds")
View(data.from.my.friend)
data <- read.csv("../data/tema1/auto-mpg.csv", header = TRUE, sep = ",")
names(data)#devuelve el nombre de las columnas
str(data)#estructura de los datos
data <- read.csv("../data/tema1/auto-mpg-noheader.csv", header = FALSE, sep =",",
col.names = c("Numero", "MillasPorGalon", "Cilindrada",
"Desplazamiento", "Caballos", "Peso",
"Aceleracion", "Año", "Modelo"))
xtable(tail(data, 5)) # muestra los 5 últimos por pantalla
data <- read.csv("https://frogames.es/course-contents/r/intro/tema1/WHO.csv")
url <- "../data/tema1/cd_catalog.xml"
xmlDoc <- xmlParse(url)
rootNode <- xmlRoot(xmlDoc)
data <- xmlSApply(rootNode, function(x) xmlSApply(x, xmlValue))
df <- data.frame(t(data), row.names = NULL)
xtable(df, caption = "Datos desde un XML")
url <- "../data/tema1/WorldPopulation-wiki.htm"
tables <- readHTMLTable(url)
xtable(world.most.populous, caption = "Lugares más poblados")
url <- "../data/tema1/WorldPopulation-wiki.htm"
tables <- readHTMLTable(url)
world.most.populous <- tables[[6]]
xtable(world.most.populous, caption = "Lugares más poblados")
data <- fromJSON("../data/tema1/students.json")
edad <- 30
name <- "Juan Gabriel"
save.image(file="../data/tema1/todos_los_datos.RData")
attach("../data/tema1/todos_los_datos.RData")
data
data()
raw.data <- read.csv("../data/tema1/missing-data.csv")
View(raw.data)
na.omit(raw.data)
is.na(raw.data)
is.na(raw.data$Income)
complete.cases(raw.data)
nrow(complete.cases(raw.data))
nrow(complete.cases(raw.data))
sum(complete.cases(raw.data))
nrow(raw.data)
raw.data$Income
raw.data$Income[is.na(raw.data)]
mean(raw.data$Income)
raw.data$Income[is.na(raw.data)] <- 0
raw.data$Income[is.na(raw.data)] <- 0
raw.data$Income[is.na(raw.data)]
raw.data$Income[is.na(raw.data)] <- 0
raw.data$Income[is.na(raw.data$Income)] <- 0
mean(raw.data$Income)
raw.data$Income[raw.data$Income == 0] <- NA
mean(raw.data$Income)
mean(raw.data$Income, na.rm = TRUE)
mean(raw.data$Income)
raw.data$Income[is.na(raw.data$Income)] <- 0
mean(raw.data$Income)
raw.data$Income[raw.data$Income == 0] <- NA
mean(raw.data$Income, na.rm = TRUE)
raw.data <- read.csv("../data/tema1/missing-data.csv")
raw.data$Income.imputed.mean <- 0
raw.data$Income.imputed.mean <- ifelse(!is.na(raw.data$Income),
raw.data$Income,
mean(raw.data$Income, na.rm=TRUE))
rand.impute <- function(a){
missing.data <- is.na(a)## buscamos las filas que no tiene un valor
n.missing <- sum(missing.data)## contamos cuantos elementos tienen NAs
a.obs <- a[!missing.data]##me quedo con los datos que SI tengo observados
imputed <- a
imputed[missing.data] <- sample(a.obs, n.missing, replace = TRUE)
return(imputed)
}
random.impute.data <- function(dataframe, cols){
nms <- names(dataframe)
for (col in cols) {
name <- paste(nms[col], "imputed", sep=".")
dataframe[name] <- rand.impute(dataframe[   ,col])
}
dataframe
}
View(rand.impute)
View(random.impute.data)
View(rand.impute)
View(random.impute.data)
View(rand.impute)
View(random.impute.data)
raw.data
raw.data <- read.csv("../data/tema1/missing-data.csv")
raw.data
View(raw.data)
random.impute.data(raw.data,c(1,2) )
View(random.impute.data(raw.data,c(1,2) ))
View(random.impute.data(raw.data,c(1,2) ))
raw.data$Income[raw.data$Income==0]<-NA
View(random.impute.data(raw.data,c(1,2) ))
raw.data$Phone_type[raw.data$Phone_type==""]
raw.data$Phone_type[raw.data$Phone_type==""] <- NA
raw.data$Phone_type
is.na(raw.data$Phone_type)
View(random.impute.data(raw.data,c(1,2) ))
View(random.impute.data(raw.data,c(1,2) ))
salary <- c(20000, 30000, 25000, 40000, 30000, 34000, 30000)
family.size <- c(4,3,2,2,3,4,3)
car <- c("Lujo", "Compacto", "Familiar", "Lujo", "Compacto", "Compacto", "Compacto")
data <- data.frame(salary, family.size, car)
View(data)
unique(data)
remove.duplicates <- unique(data)
View(data)
View(remove.duplicates)
duplicated(data)
data[duplicated(data),]
View(data)
View(data)
install.packages()
install.packages("scales")
data <- read.csv("../data/tema1/data-conversion.csv")
View(data)
data$Income.scaled <- rescale(data$Income)
library(scales)
data$Income.scaled <- rescale(data$Income)
View(data)
data$Income.scaled <- rescale(data$Income, to = c(1, 35))
View(data)
data <- read.csv("../data/tema1/BostonHousing.csv")
View(data)
data.z <- scale(data)
View(data.z)
View(data)
View(data.z)
View(data)
data <- read.csv("../data/tema1/data-conversion.csv")
View(data)
limits <- c(-Inf, 10000, 31000, Inf)
names <- c("Pringao", "Trabajador", "Jefe")
data$Income.class <- cut(data$Income, breaks = limits, labels = names)
View(data)
data$Income.category <- cut(data$Income, breaks = limits)
View(data)
View(data)
install.packages("dummies")
library(dummies)
data <- read.csv("../data/tema1/data-conversion.csv")
dummy.data.frame(data, sep="_")
data.dummy <- dummy.data.frame(data, sep="_")
View(data.dummy)
View(data)
View(data.dummy)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv("../data/tema2/auto-mpg.csv", header = TRUE,
stringsAsFactors =  FALSE)
View(data)
str(data)
View(data)
data$cylinders <- factor(data$cylinders, levels = c(3,4,5,6,8),
labels = c("3C", "4C", "5C", "6C", "8C"))
str(data)
install.packages(c("modeest", "raster", "moments"))
data <- read.csv("../data/tema1/ozone.csv", stringsAsFactors = FALSE)
View(data)
data <- read.csv("../data/tema2/auto-mpg.csv", header = TRUE,
stringsAsFactors =  FALSE)
data$cylinders <- factor(data$cylinders, levels = c(3,4,5,6,8),
labels = c("3C", "4C", "5C", "6C", "8C"))
View(data)
hist(data$mpg, col = rainbow(12), prob = TRUE)
lines(density(data$mpg))
hist(data$mpg, col = rainbow(12), prob = TRUE)
lines(density(data$mpg))
reg <- lm(mpg~horsepower, data = data)
View(reg)
help(legend)
install.packages("lattice")
library(lattice)
install.packages("beanplot")
data <- read.csv("../data/tema2/daily-bike-rentals.csv")
View(data)
data$season <- factor(data$season, levels = 1:4,
labels = c("Inv", "Prim", "Ver", "Oto"))
data$workingday <- factor(data$workingday, levels = c(0,1),
labels = c("Festivo", "Laboral"))
data$weathersit <- factor(data$weathersit, levels = 1:3,
labels = c("Solead", "Nublado", "Lluvia"))
inv <- subset(data, season == "Inv")
pri <- subset(data, season == "Prim")
ver <- subset(data, season == "Ver")
oto <- subset(data, season == "Oto")
View(inv)
inv <- subset(data, season == "Inv")$cnt
pri <- subset(data, season == "Prim")$cnt
ver <- subset(data, season == "Ver")$cnt
oto <- subset(data, season == "Oto")$cnt
bwplot(cnt~weathersit, data = data,
xlab = "Meteorología", ylab = "Frecuencia",
par.settings = list(box.rectangle = list(fill=rep(c('red', "yellow", "green"),2))))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
mpg
View(mpg)
ggplot(data = mpg)+
geom_smooth(maaping = aes(x = displ, y = hwy))
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))+
facet_wrap(~class, nrow = 2)
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))+
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, col = class))+
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, col = class))+
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv), se = F)
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, col = class), stroke = "white")+
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv), se = F)
ggplot(data = mpg) +
geom_bar(mapping = aes(x=drv))
ggplot(data = mpg) +
geom_bar(mapping = aes(x=class))
View(diamonds)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut))
ggplot(data = diamonds) +
stat_summary(mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut, fill = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut, fill = clarity))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut, fill = clarity),
alpha = 0.2)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut, fill = clarity),
alpha = 0.2, fill = NA)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut, color = clarity),
alpha = 0.2, fill = NA)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut, color = clarity),
alpha = 0.2, fill = NA, position = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut, color = clarity),
alpha = 0.2,  position = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut, color = clarity),
alpha = 0.2, fill = NA, position = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut, fill = clarity),
alpha = 0.2, position = "fill")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut, fill = clarity),
alpha = 0.6, position = "fill")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x=cut, fill = clarity),
alpha = 0.6, position = "dodge")
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy), position = "jitter")
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x=class, y = hwy))
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x=class, y = hwy))+
coord_flip()
nz <- map_data("nz")
install.packages("maps")
nz <- map_data("nz")
ggplot(data = nz, aes(x = long, y = lat))+
geom_polygon(fill = "green", colour = "black")
ggplot(data = nz, aes(x = long, y = lat, group = group))+
geom_polygon(fill = "green", colour = "black")
ggplot(data = nz, aes(x = long, y = lat))+
geom_polygon(fill = "green", colour = "black")
ggplot(data = nz, aes(x = long, y = lat, group = group))+
geom_polygon(fill = "green", colour = "black")
ggplot(data = nz, aes(x = long, y = lat, group = group))+
geom_polygon(fill = "green", colour = "black")+
coord_quickmap()
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut)
)
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = F
)
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = F,
width = 1
)
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = F,
width = 1
)+
theme(aspect.ratio = 1)
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = F,
width = 1
)+
theme(aspect.ratio = 1)+
labs(x = "Corte", y = "Número de Diamantes")
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = F,
width = 1
)+
theme(aspect.ratio = 1)+
labs(x = "Corte", y = "Número de Diamantes")+
coord_flip()
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = F,
width = 1
)+
theme(aspect.ratio = 1)+
labs(x = "Corte", y = "Número de Diamantes")+
coord_flip()+
coord_polar()
ggplot(data = diamonds) +
geom_bar(
mapping = aes(x = cut, fill = cut),
show.legend = F,
width = 1
)+
theme(aspect.ratio = 1)+
labs(x = "Corte", y = "Número de Diamantes", title = "Diagrama en forma de tela de araña")+
coord_flip()+
coord_polar()
